<%- include partials/header.ejs %>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Form</title>
</head>

<body onload="connectMetamask(),connectContract()">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
    <div class="jumbotron" style="background-color: skyblue; position: relative; background-color: rgba(0, 0, 0, 0.816);">
        <div class="container">
            <h1 class="display-4" style="color: rgb(255, 255, 255);"><strong>SmartFunds App</strong></h1>
            <p class="lead" style="color: rgb(255, 255, 255);"><strong><em>Donate to Charity & Social Welfare</em></strong></p>
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/MetaMask_Fox.svg/1200px-MetaMask_Fox.svg.png" alt="MetaMask Logo" style="width: 100px; height: 100px;">
            <h2 class="mt-3">Connected to MetaMask</h2>
            <p id="userArea" class="mt-3 text-muted">Status: Not connected to MetaMask</p>
            <p id="contractArea">Status: Not connected to Contract</p>
        </div>
    </div>
<div class="container">
<h2>Details</h2>
<div class="form-group">
<label for="name">CharityName:</label>
<input type="name" id="name" name="name" required>
</div>
</form>
</div>
<!-- Name<br>
 
<input type ="text" id="name" name="name" required><br>
Phone<br>
<input type ="text" id="phone" name="phone" required><br> -->
<div style="text-align: center;">
<button class="btn btn-success" onclick="addname()">Submit</button>
<button class="btn btn-success" onclick="getname()">Getcharityname</button>
</div>
<div id="showEmail" style="text-align: center;"></div>


<script>
    let account;
    const connectMetamask = async () => {
        if(window.ethereum !== "undefined") {
            const accounts = await ethereum.request({method: "eth_requestAccounts"});
            account = accounts[0];
            document.getElementById("userArea").innerHTML = `User Account: ${account}`;
        }
    }
    const connectContract = async () => {
        const ABI =[
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "phone",
				"type": "string"
			}
		],
		"name": "DetailsSet",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_phone",
				"type": "string"
			}
		],
		"name": "setDetails",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getDetails",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "phone",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];

        const Address = "0x0f6FB382D8Bd9573214e3686e6da7eCA5Cd18104"; 
        window.web3 = await new Web3(window.ethereum);
        window.contract = await new window.web3.eth.Contract(ABI, Address);
        document.getElementById("contractArea").innerHTML = "Connected to Contract";
    }
    const setDetails = () => {
    // e.preventDefault();
     const name = document.getElementById("name").value;
     const phone = document.getElementById("phone").value;
 
    console.log(name,phone);
 
     window.ethereum.request({ method: 'eth_requestAccounts' })
         .then((accounts) => {
             const account = accounts[0];
             return contract.methods.setDetails(name, phone).send({ from: account });
         })
         .then(() => {
             alert('Details set successfully');
         })
         .catch((error) => {
             console.error('Error setting details:', error);
             alert('Failed to set details');
         });
 }
 
 
 const getDetails = () => {
     contract.methods.getDetails().call()
         .then((result) => {
             const name = result[0];
             const phone = result[1];
             document.getElementById("details").innerHTML = `
                 Name: ${name}<br>
            
                 Phone: ${phone}<br>
             `;
         })
         .catch((error) => {
             console.error('Error getting details:', error);
             alert('Failed to get details');
         });
 }

</script>
</body>
</html>


